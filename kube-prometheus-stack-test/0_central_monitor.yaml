## Deploy node exporter as a daemonset to all nodes
##
nodeExporter:
  enabled: false  

prometheus:
  enabled: false  

prometheusOperator:
  enabled: false  

alertmanager:
  enabled: false

## Flag to disable all the kubernetes component scrapers
kubernetesServiceMonitors:
  enabled: false

kubeStateMetrics:       ## Component scraping kube state metrics
  enabled: false


################################### 
#  Centrailized Monitoring Host
###################################
grafana:
  enabled: true
  namespaceOverride: ""

  forceDeployDatasources: true           ## ForceDeployDatasources Create datasource configmap even if grafana deployment has been disabled
  forceDeployDashboards: true            ## ForceDeployDashboard Create dashboard configmap even if grafana deployment has been disabled
  defaultDashboardsEnabled: true         ## Deploy default dashboards
  defaultDashboardsTimezone: Asia/Seoul  ## Timezone for the default dashboards
  adminPassword: admin

  rbac:
    pspEnabled: false  ## If true, Grafana PSPs will be created

  ingress:
    enabled: true
    annotations: 
      spec.ingressClassName: traefik  # k3s default ingress controller
    labels: {}
    hosts:
      - monitor.wai
    path: /
    tls: []

  # grafana/grafana의 pvc는 초기 프로비저닝 용도로 사용되며, helm uninstall시 함께 삭제된다. pvc 유지 옵션 미지원.
    # template을 수정하거나 kubectl patch로 정책을 임시수정해줘야 한다.
    # persistence매니페스트의 spec에서 persistentVolumeReclaimPolicy: Retain이 있어야 함 (Default: Delete)
  persistence:
    type: pvc
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    # annotations: {}
    finalizers:
      - kubernetes.io/pvc-protection
    # selectorLabels: {}
    ## Sub-directory of the PV to mount. Can be templated.
    # subPath: ""
    ## Name of an existing PVC. Can be templated.
    # existingClaim:
    ## Extra labels to apply to a PVC.
    extraPvcLabels: {}

    ## If persistence is not enabled, this allows to mount the
    ## local storage in-memory to improve performance
    ##
    inMemory:
      enabled: false
      ## The maximum usage on memory medium EmptyDir would be
      ## the minimum value between the SizeLimit specified
      ## here and the sum of memory limits of all containers in a pod
      ##
      # sizeLimit: 300Mi

  ## Additional grafana server volume mounts
  # Defines additional volume mounts.
  # extraVolumeMounts: []
    # - name: extra-volume-0
    #   mountPath: /mnt/volume0
    #   readOnly: true
    # - name: extra-volume-1
    #   mountPath: /mnt/volume1
    #   readOnly: true
    # - name: grafana-secrets
    #   mountPath: /mnt/volume2

  ## Additional Grafana server volumes
  # extraVolumes: []
    # - name: extra-volume-0
    #   existingClaim: volume-claim
    # - name: extra-volume-1
    #   hostPath:
    #     path: /usr/shared/
    #     type: ""
    # - name: grafana-secrets
    #   csi:
    #     driver: secrets-store.csi.k8s.io
    #     readOnly: true
    #     volumeAttributes:
    #       secretProviderClass: "grafana-env-spc"


  ## Configure grafana dashboard providers
  ## ref: http://docs.grafana.org/administration/provisioning/#dashboards
  ##
  ## `path` must be /var/lib/grafana/dashboards/<provider_name>
  ##
  dashboardProviders: # {}
   dashboardproviders.yaml:
     apiVersion: 1
     providers:
      - name: 'my-default'
        orgId: 1
        folder: 'all-cluster-monitoring'
        type: file
        disableDeletion: true
        editable: false
        options:
          path: /var/lib/grafana/dashboards/my-default  

  #    - name: 'default'
  #      orgId: 1
  #      folder: ''
  #      type: file
  #      disableDeletion: false
  #      editable: true
  #      options:
  #        path: /var/lib/grafana/dashboards/default

  ## Configure grafana dashboard to import
  ## NOTE: To use dashboards you must also enable/configure dashboardProviders
  ## ref: https://grafana.com/dashboards
  ##
  ## dashboards per provider, use provider name as key.
  ##
  dashboards: # {}
    my-default:
      custom_11074_rev9: # 여러 Datasource 참조할 수 있도록 수정, 개별노드 페이지 쿼리 수정, 일부 패널 해상도 조정
        url: https://raw.githubusercontent.com/YunanJeong/grafana-test/main/kube-prometheus-stack-test/dashboards/custom_11074_rev9.json
        # datasource: '$datasource'    
      nodes:
        url: https://raw.githubusercontent.com/YunanJeong/grafana-test/main/kube-prometheus-stack-test/dashboards/nodes.json
      node-cluster-rsrc-use:
        url: https://raw.githubusercontent.com/YunanJeong/grafana-test/main/kube-prometheus-stack-test/dashboards/node-cluster-rsrc-use.json
      node-exporter-full:
        gnetId: 1860
        revision: 32

    # default:
    #   some-dashboard:
    #     json: |
    #       $RAW_JSON
    #   custom-dashboard:
    #     file: dashboards/custom-dashboard.json
    #   prometheus-stats:
    #     gnetId: 2
    #     revision: 2
    #     datasource: Prometheus
    #   local-dashboard:
    #     url: https://example.com/repository/test.json
    #     token: ''
    #   local-dashboard-base64:
    #     url: https://example.com/repository/test-b64.json
    #     token: ''
    #     b64content: true
    #   local-dashboard-gitlab:
    #     url: https://example.com/repository/test-gitlab.json
    #     gitlabToken: ''
    #   local-dashboard-bitbucket:
    #     url: https://example.com/repository/test-bitbucket.json
    #     bearerToken: ''
    #   local-dashboard-azure:
    #     url: https://example.com/repository/test-azure.json
    #     basic: ''
    #     acceptHeader: '*/*'

  ## Reference to external ConfigMap per provider. Use provider name as key and ConfigMap name as value.
  ## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
  ## ConfigMap data example:
  ##
  ## data:
  ##   example-dashboard.json: |
  ##     RAW_JSON
  ##
  dashboardsConfigMaps: {}
  #  default: ""

  sidecar: 
    dashboards:                 # 대시보드 사전 설정하기 (grafana-sc-dashboard)
      enabled: true               # true시, kube-prometheus-stack의 기본제공 대시보드 or 커스텀 대시보드를 활성화
      
      label: grafana_dashboard    # 커스텀 대시보드 사전 설정하기 (별도 configmap 생성 필요)
      labelValue: "1"             # configmap 매니페스트에서,
                                    # metadata.labels 섹션에 label-labelValue와 동일한 key-value를 입력
                                    # data섹션에 대시보드 설정json을 입력
                                  # 이후 configmap 배포시 대시보드가 배포된다. (오류시 sidecar만 재실행)
                                  # configmap은 "value파일 제일 아래 extraManifests섹션"이나 별도 helm template 등을 활용가능

      # Allow discovery in all namespaces for dashboards
      searchNamespace: ALL

      ## Annotations for Grafana dashboard configmaps
      ##
      annotations: {}
      multicluster:
        global:
          enabled: false  # default: false ?????????????????????????????
        etcd:
          enabled: false  # default: false ?????????????????????????????
      provider:
        allowUiUpdates: true
    
    # datasource 사전 설정하기 (grafana)
    datasources:
      enabled: true
      defaultDatasourceEnabled: false  # 기본 Data Source 생성 (grafana와 동일 cluster에서, 동일 helm release로 생성된 Prometheus 주소를 참조)
      isDefaultDatasource: false       # 

      uid: prometheus

      ## URL of prometheus datasource
      ##
      # url: http://prometheus-stack-prometheus:9090/

      ## Prometheus request timeout in seconds
      # timeout: 30

      # If not defined, will use prometheus.prometheusSpec.scrapeInterval or its default
      # defaultDatasourceScrapeInterval: 15s

      ## Annotations for Grafana datasource configmaps
      ##
      annotations: {}

      ## Set method for HTTP to send query to datasource
      httpMethod: POST

      ## Create datasource for each Pod of Prometheus StatefulSet;
      ## this uses headless service `prometheus-operated` which is
      ## created by Prometheus Operator
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/0fee93e12dc7c2ea1218f19ae25ec6b893460590/pkg/prometheus/statefulset.go#L255-L286
      createPrometheusReplicasDatasources: false
      label: grafana_datasource
      labelValue: "1"

      ## Field with internal link pointing to existing data source in Grafana.
      ## Can be provisioned via additionalDataSources
      exemplarTraceIdDestinations: {}
        # datasourceUid: Jaeger
        # traceIdLabelName: trace_id
      alertmanager:
        enabled: true
        uid: alertmanager
        handleGrafanaManagedAlerts: false
        implementation: prometheus

  extraConfigmapMounts: []
  # - name: certs-configmap
  #   mountPath: /etc/grafana/ssl/
  #   configMap: certs-configmap
  #   readOnly: true

  deleteDatasources: []
  # - name: example-datasource
  #   orgId: 1

  ## Configure additional grafana datasources (passed through tpl)
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  # grafana.sidecar.datasources.enabled=true 필요
  additionalDataSources:  # []     
  - name: prometheus-sample
    access: proxy
    basicAuth: true
    basicAuthPassword: pass
    basicAuthUser: daco
    editable: false
    jsonData:
        tlsSkipVerify: true
    orgId: 1
    type: prometheus
    url: http://172.31.24.115:9090  # http https 구분해서 반드시 기입 필요
    version: 1
  - name: kr-mum-prometheus
    access: proxy
    basicAuth: true
    basicAuthPassword: pass
    basicAuthUser: user
    editable: false
    jsonData:
        tlsSkipVerify: true
    orgId: 1
    type: prometheus
    url: http://172.31.4.123:9090  # http https 구분해서 반드시 기입 필요
    version: 1
  # - name: prometheus-sample
  #   access: proxy
  #   basicAuth: true
  #   basicAuthPassword: pass
  #   basicAuthUser: daco
  #   editable: false
  #   jsonData:
  #       tlsSkipVerify: true
  #   orgId: 1
  #   type: prometheus
  #   url: https://{{ printf "%s-prometheus.svc" .Release.Name }}:9090
  #   version: 1

  ## Passed to grafana subchart and used by servicemonitor below
  ##
  service:
    type: NodePort # LoadBalancer
    nodePort: 30000
    portName: http-web

  serviceMonitor:
    enabled: false


## 
## Extra manifests to deploy as an array
extraManifests: []
  # - apiVersion: v1
  #   kind: ConfigMap
  #   metadata:
  #     name: dasboard-configmap-test
  #     namespace: "{{ .Release.Namespace }}"
  #     labels:
  #       grafana_dashboard: "1"
  #   # tpl이 적용되므로 직접 대시보드 json을 기입하면 대괄호 때문에 파싱에러 가능성이 큼
  #   data:
  #     # 파일 참조는 차트 내부 디렉토리 기준임.
  #     nodes.json: '{{ .Files.Get "dashboards/nodes_line.json" | toJson }}'  



