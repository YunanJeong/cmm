## Deploy node exporter as a daemonset to all nodes
##
nodeExporter:
  enabled: true
  operatingSystems:
    linux:
      enabled: true
    darwin:
      enabled: false


# --set kube-prometheus-stack.prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.metadata.name=data
# prometheus:
#   prometheusSpec:
#     storageSpec:
#       volumeClaimTemplate:
#         metadata:
#           name: data

prometheus:
  service:
    type: LoadBalancer
  prometheusSpec:
    nodeSelector: {}
    externalUrl: "promethues.test.wai"
    retention: 7d
    additionalScrapeConfigs: []
      # 단일 클러스터, kafka-exporter
      # - job_name: kafka-metrics
      #   scrape_interval: 10s
      #   scrape_timeout:  5s
      #   metrics_path: "/metrics"  # exporter 설정에서 정해진대로 써준다.
      #   static_configs:
      #     - targets:
      #       - test-kafka-metrics.default.svc.cluster.local:9308
      # # 단일 클러스터, kafka-jmx
      # - job_name: kafka-jmx
      #   scrape_interval: 10s
      #   scrape_timeout:  5s
      #   metrics_path: "/"         # exporter 설정에서 정해진대로 써준다.
      #   static_configs:
      #     - targets:
      #       - test-kafka-jmx-metrics.default.svc.cluster.local:5556
  ingress:
    enabled: false
    # ingressClassName: nginx
    annotations: {}
    labels: {}
    # servicePort: 8081
    hosts: []
    #   - prometheus.domain.com
    paths: []
    # - /
    # pathType: ImplementationSpecific
    tls: []


## Configuration for prometheus-node-exporter subchart
##
prometheus-node-exporter:
  namespaceOverride: ""
  podLabels:
    ## Add the 'node-exporter' label to be used by serviceMonitor to match standard common usage in rules and grafana dashboards
    ##
    jobLabel: node-exporter
  releaseLabel: true
  extraArgs:
    - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
  service:
    portName: http-metrics
  prometheus:
    monitor:
      enabled: true

      jobLabel: jobLabel

      ## Scrape interval. If not set, the Prometheus default scrape interval is used.
      ##
      interval: ""

      ## SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
      ##
      sampleLimit: 0

      ## TargetLimit defines a limit on the number of scraped targets that will be accepted.
      ##
      targetLimit: 0

      ## Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
      ##
      labelLimit: 0

      ## Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
      ##
      labelNameLengthLimit: 0

      ## Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
      ##
      labelValueLengthLimit: 0

      ## How long until a scrape request times out. If not set, the Prometheus default scape timeout is used.
      ##
      scrapeTimeout: ""

      ## proxyUrl: URL of a proxy that should be used for scraping.
      ##
      proxyUrl: ""

      ## MetricRelabelConfigs to apply to samples after scraping, but before ingestion.
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
      ##
      metricRelabelings: []
      # - sourceLabels: [__name__]
      #   separator: ;
      #   regex: ^node_mountstats_nfs_(event|operations|transport)_.+
      #   replacement: $1
      #   action: drop

      ## RelabelConfigs to apply to samples before scraping
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
      ##
      relabelings: []
      # - sourceLabels: [__meta_kubernetes_pod_node_name]
      #   separator: ;
      #   regex: ^(.*)$
      #   targetLabel: nodename
      #   replacement: $1
      #   action: replace
  rbac:
    ## If true, create PSPs for node-exporter
    ##
    pspEnabled: false


prometheusOperator:
  enabled: true
  nodeSelector: {}

grafana:
  enabled: false
