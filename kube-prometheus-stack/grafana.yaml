## Deploy node exporter as a daemonset to all nodes
##
nodeExporter:
  enabled: false

prometheus:
  enabled: false

prometheusOperator:
  enabled: false

grafana:
  enabled: true
  namespaceOverride: ""

  ## ForceDeployDatasources Create datasource configmap even if grafana deployment has been disabled
  ##
  forceDeployDatasources: true

  ## ForceDeployDashboard Create dashboard configmap even if grafana deployment has been disabled
  ##
  forceDeployDashboards: true

  ## Deploy default dashboards
  ##
  defaultDashboardsEnabled: true

  ## Timezone for the default dashboards
  ## Other options are: browser or a specific timezone, i.e. Europe/Luxembourg
  ##
  defaultDashboardsTimezone: Asia/Seoul  # utc

  adminPassword: admin

  rbac:
    ## If true, Grafana PSPs will be created
    ##
    pspEnabled: false

  ingress:
    enabled: true
    annotations: 
      spec.ingressClassName: traefik  # k3s default ingress controller
    labels: {}
    hosts:
      - monitor.wai
    path: /
    tls: []

  sidecar: 
    
    dashboards:                 # 대시보드 사전 설정하기 (grafana-sc-dashboard)
      enabled: true               # true시, kube-prometheus-stack의 기본제공 대시보드 or 커스텀 대시보드를 활성화
      
      label: grafana_dashboard    # 커스텀 대시보드 사전 설정하기 (별도 configmap 생성 필요)
      labelValue: "1"             # configmap 매니페스트에서,
                                    # metadata.labels 섹션에 label-labelValue와 동일한 key-value를 입력
                                    # data섹션에 대시보드 설정json을 입력
                                  # 이후 configmap 배포시 대시보드가 배포된다. (오류시 sidecar만 재실행)
                                  # configmap은 helm template이나 kubectl로 배포하면 된다.

      # Allow discovery in all namespaces for dashboards
      searchNamespace: ALL

      ## Annotations for Grafana dashboard configmaps
      ##
      annotations: {}
      multicluster:
        global:
          enabled: true  # default: false ?????????????????????????????
        etcd:
          enabled: true  # default: false ?????????????????????????????
      provider:
        allowUiUpdates: true
    
    # datasource 사전 설정하기 (grafana)
    datasources:
      enabled: true
      defaultDatasourceEnabled: false  # 기본 Data Source 생성 (grafana와 동일 cluster에서, 동일 helm release로 생성된 Prometheus 주소를 참조)
      isDefaultDatasource: false       # 

      uid: prometheus                  # 대시보드의 UID(고유 식별자)는 여러 Grafana 설치 간에 대시보드를 고유하게 식별하는 데 사용될 수 있습니다.
                                       # UID를 사용하면 대시보드에 액세스하기 위한 일관된 URL을 가질 수 있으므로 대시보드 제목을 변경해도 해당 대시보드에 대한 북마크 링크가 끊어지지 않습니다.

      ## URL of prometheus datasource
      ##
      # url: http://prometheus-stack-prometheus:9090/

      ## Prometheus request timeout in seconds
      # timeout: 30

      # If not defined, will use prometheus.prometheusSpec.scrapeInterval or its default
      # defaultDatasourceScrapeInterval: 15s

      ## Annotations for Grafana datasource configmaps
      ##
      annotations: {}

      ## Set method for HTTP to send query to datasource
      httpMethod: POST

      ## Create datasource for each Pod of Prometheus StatefulSet;
      ## this uses headless service `prometheus-operated` which is
      ## created by Prometheus Operator
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/0fee93e12dc7c2ea1218f19ae25ec6b893460590/pkg/prometheus/statefulset.go#L255-L286
      createPrometheusReplicasDatasources: false
      label: grafana_datasource
      labelValue: "1"

      ## Field with internal link pointing to existing data source in Grafana.
      ## Can be provisioned via additionalDataSources
      exemplarTraceIdDestinations: {}
        # datasourceUid: Jaeger
        # traceIdLabelName: trace_id
      alertmanager:
        enabled: true
        uid: alertmanager
        handleGrafanaManagedAlerts: false
        implementation: prometheus

  extraConfigmapMounts: []
  # - name: certs-configmap
  #   mountPath: /etc/grafana/ssl/
  #   configMap: certs-configmap
  #   readOnly: true

  deleteDatasources: []
  # - name: example-datasource
  #   orgId: 1

  ## Configure additional grafana datasources (passed through tpl)
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  # grafana.sidecar.datasources.enabled=true 필요
  additionalDataSources:  # []     
  - name: prometheus-sample
    access: proxy
    basicAuth: true
    basicAuthPassword: pass
    basicAuthUser: daco
    editable: false
    jsonData:
        tlsSkipVerify: true
    orgId: 1
    type: prometheus
    url: http://172.31.24.115:9090  # http https 구분해서 반드시 기입 필요
    version: 1

  # - name: prometheus-sample
  #   access: proxy
  #   basicAuth: true
  #   basicAuthPassword: pass
  #   basicAuthUser: daco
  #   editable: false
  #   jsonData:
  #       tlsSkipVerify: true
  #   orgId: 1
  #   type: prometheus
  #   url: https://{{ printf "%s-prometheus.svc" .Release.Name }}:9090
  #   version: 1

  ## Passed to grafana subchart and used by servicemonitor below
  ##
  service:
    type: NodePort # LoadBalancer
    nodePort: 30000
    portName: http-web

  serviceMonitor:
    enabled: false